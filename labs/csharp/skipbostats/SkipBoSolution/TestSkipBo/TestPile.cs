// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using SkipBo;
namespace TestSkipBo
{
    /// <summary>
    ///This is a test class for SkipBo.Pile and is intended
    ///to contain all SkipBo.Pile Unit Tests
    ///</summary>
    [TestClass()]
    public class TestPile
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Pop ()
        ///</summary>
        [TestMethod(), ExpectedException(typeof(InvalidPlayException))]
        public void PopEmptyPileTest()
        {
            Pile target = new Pile(PileType.Draw);

            target.Pop();
        }

        /// <summary>
        ///A test for Pop ()
        ///</summary>
        [TestMethod()]
        public void PopPileTest()
        {
            Pile target = new Pile(PileType.Discard);
            Card card = new Card(0);
            target.Add(card);

            Card expected = card;
            Card actual;

            actual = target.Pop();

            Assert.AreEqual(expected, actual, "SkipBo.Pile.Pop did not return the expected value.");
        }

        [TestMethod]
        public void TopPileTest()
        {
            Pile target = new Pile(PileType.Discard);
            Card card = new Card(0);
            target.Add(card);

            Card expected = card;
            Card actual;

            actual = target.Top;

            Assert.AreEqual(expected, actual, "SkipBo.Pile.Top did not return the expected value.");
        }

        /// <summary>
        ///A test for Pop ()
        ///</summary>
        [TestMethod(), ExpectedException(typeof(InvalidPlayException))]
        public void TopEmptyPileTest()
        {
            Pile target = new Pile(PileType.Discard);

            Card top = target.Top;
        }

        [TestMethod]
        public void PileTypeTest()
        {
            Pile pile = new Pile(PileType.Build);
            Assert.AreEqual(PileType.Build, pile.PileType);
        }

        [TestMethod]
        public void LegalPlayTest()
        {
            Pile pile = new Pile(PileType.Build);
            int playedValue;
            Assert.IsTrue(pile.IsLegalPlay(new Card(1), pile, out playedValue));
        }

        [TestMethod]
        public void IllegalCardPlayTest()
        {
            Pile pile = new Pile(PileType.Build);
            int playedValue;
            Assert.IsFalse(pile.IsLegalPlay(new Card(2), pile, out playedValue));
        }

        [TestMethod]
        public void PlayToIllegalPileTest()
        {
            Pile pile = new Pile(PileType.Reserve);
            int playedValue;
            Assert.IsFalse(pile.IsLegalPlay(new Card(1), pile, out playedValue));
            
            pile = new Pile(PileType.Draw);
            Assert.IsFalse(pile.IsLegalPlay(new Card(1), pile, out playedValue));

            pile = new Pile(PileType.Hand);
            Assert.IsFalse(pile.IsLegalPlay(new Card(1), pile, out playedValue));

            pile = new Pile(PileType.Reserve);
            Assert.IsFalse(pile.IsLegalPlay(new Card(1), pile, out playedValue));
        }
    }


}
